// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SprintBuisness.EntityframeworkCore.Contexts;

#nullable disable

namespace SprintBuisness.EntityframeworkCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeWorkGroup", b =>
                {
                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<int>("WorkGroupsId")
                        .HasColumnType("int");

                    b.HasKey("EmployeesId", "WorkGroupsId");

                    b.HasIndex("WorkGroupsId");

                    b.ToTable("EmployeeWorkGroup");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Contacts.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NickName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Conversations.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("CustomerServiceEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Owner")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.HasIndex("CustomerServiceEmployeeId");

                    b.HasIndex("WorkGroupId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Conversations.Histories.ConversationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentOwner")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WorkGroupId");

                    b.ToTable("ConversationHistories");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Conversations.Notes.Attachments.ConversationNoteAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationNoteId")
                        .HasColumnType("int");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationNoteId");

                    b.ToTable("ConversationNoteAttachments");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Conversations.Notes.ConversationNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId")
                        .IsUnique();

                    b.ToTable("ConversationNotes");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Flows.Flow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Flows.FlowMessageButtons.FlowMessageButton", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("FlowMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Next")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FlowMessageId");

                    b.ToTable("FlowMessageButtons");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Flows.FlowMessageItems.FlowMessageOption", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FlowMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Next")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"));

                    b.HasKey("Id");

                    b.HasIndex("FlowMessageId");

                    b.ToTable("FlowMessageOptions");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Flows.FlowMessageLists.FlowMessageListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Description")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<Guid>("FlowMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Next")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FlowMessageId");

                    b.ToTable("FlowMessageListItems");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Flows.FlowMessages.FlowMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<string>("ButtonListDisplayText")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<int?>("FlowId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.ToTable("FlowMessages");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Hangfire.HangfireTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("HangfireTasks");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Messages.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("FlowMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("FromBot")
                        .HasColumnType("bit");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNotify")
                        .HasColumnType("bit");

                    b.Property<bool>("Received")
                        .HasColumnType("bit");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<int?>("TemplateMessageId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("FlowMessageId");

                    b.HasIndex("HistoryId")
                        .IsUnique()
                        .HasFilter("[HistoryId] IS NOT NULL");

                    b.HasIndex("SenderId");

                    b.HasIndex("TemplateMessageId")
                        .IsUnique()
                        .HasFilter("[TemplateMessageId] IS NOT NULL");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Messages.Templates.TemplateMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Footer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HeaderFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TemplateMessages");
                });

            modelBuilder.Entity("SprintBusiness.Domain.ReplyTemplates.ReplyTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ReplyTemplates");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Templates.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasMaxLength(250)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Language")
                        .HasMaxLength(25)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("SubCategory")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TemplateId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Templates.TemplateButtons.TemplateButton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Type")
                        .HasMaxLength(250)
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateButtons");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Templates.TemplateComponents.TemplateComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Format")
                        .HasMaxLength(250)
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Type")
                        .HasMaxLength(250)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateComponents");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Templates.TemplateVariables.TemplateVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("TemplateVariables");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Users.Employee", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkGroupsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Users.WorkGroups.WorkGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeesCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("WorkGroups");
                });

            modelBuilder.Entity("EmployeeWorkGroup", b =>
                {
                    b.HasOne("SprintBusiness.Domain.Users.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SprintBusiness.Domain.Users.WorkGroups.WorkGroup", null)
                        .WithMany()
                        .HasForeignKey("WorkGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SprintBusiness.Domain.Conversations.Conversation", b =>
                {
                    b.HasOne("SprintBusiness.Domain.Contacts.Contact", "Contact")
                        .WithOne("Conversation")
                        .HasForeignKey("SprintBusiness.Domain.Conversations.Conversation", "ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SprintBusiness.Domain.Users.Employee", "CustomerServiceEmployee")
                        .WithMany("Conversations")
                        .HasForeignKey("CustomerServiceEmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SprintBusiness.Domain.Users.WorkGroups.WorkGroup", "WorkGroup")
                        .WithMany("Conversations")
                        .HasForeignKey("WorkGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contact");

                    b.Navigation("CustomerServiceEmployee");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Conversations.Histories.ConversationHistory", b =>
                {
                    b.HasOne("SprintBusiness.Domain.Conversations.Conversation", "Conversation")
                        .WithMany("Histories")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SprintBusiness.Domain.Users.Employee", "Employee")
                        .WithMany("ConversationHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SprintBusiness.Domain.Users.WorkGroups.WorkGroup", "WorkGroup")
                        .WithMany()
                        .HasForeignKey("WorkGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Conversation");

                    b.Navigation("Employee");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Conversations.Notes.Attachments.ConversationNoteAttachment", b =>
                {
                    b.HasOne("SprintBusiness.Domain.Conversations.Notes.ConversationNote", "ConversationNote")
                        .WithMany("Attachments")
                        .HasForeignKey("ConversationNoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConversationNote");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Conversations.Notes.ConversationNote", b =>
                {
                    b.HasOne("SprintBusiness.Domain.Conversations.Conversation", "Conversation")
                        .WithOne("Note")
                        .HasForeignKey("SprintBusiness.Domain.Conversations.Notes.ConversationNote", "ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Flows.FlowMessageButtons.FlowMessageButton", b =>
                {
                    b.HasOne("SprintBusiness.Domain.Flows.FlowMessages.FlowMessage", "FlowMessage")
                        .WithMany("Buttons")
                        .HasForeignKey("FlowMessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FlowMessage");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Flows.FlowMessageItems.FlowMessageOption", b =>
                {
                    b.HasOne("SprintBusiness.Domain.Flows.FlowMessages.FlowMessage", "FlowMessage")
                        .WithMany("Options")
                        .HasForeignKey("FlowMessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FlowMessage");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Flows.FlowMessageLists.FlowMessageListItem", b =>
                {
                    b.HasOne("SprintBusiness.Domain.Flows.FlowMessages.FlowMessage", "FlowMessage")
                        .WithMany("ListItems")
                        .HasForeignKey("FlowMessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FlowMessage");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Flows.FlowMessages.FlowMessage", b =>
                {
                    b.HasOne("SprintBusiness.Domain.Flows.Flow", "Flow")
                        .WithMany()
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Messages.Message", b =>
                {
                    b.HasOne("SprintBusiness.Domain.Conversations.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SprintBusiness.Domain.Flows.FlowMessages.FlowMessage", "FlowMessage")
                        .WithMany()
                        .HasForeignKey("FlowMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SprintBusiness.Domain.Conversations.Histories.ConversationHistory", "History")
                        .WithOne()
                        .HasForeignKey("SprintBusiness.Domain.Messages.Message", "HistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SprintBusiness.Domain.Users.Employee", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SprintBusiness.Domain.Messages.Templates.TemplateMessage", "TemplateMessage")
                        .WithOne("Message")
                        .HasForeignKey("SprintBusiness.Domain.Messages.Message", "TemplateMessageId");

                    b.Navigation("Conversation");

                    b.Navigation("FlowMessage");

                    b.Navigation("History");

                    b.Navigation("Sender");

                    b.Navigation("TemplateMessage");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Templates.TemplateButtons.TemplateButton", b =>
                {
                    b.HasOne("SprintBusiness.Domain.Templates.Template", "Template")
                        .WithMany("Buttons")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Templates.TemplateComponents.TemplateComponent", b =>
                {
                    b.HasOne("SprintBusiness.Domain.Templates.Template", "Template")
                        .WithMany("Components")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Templates.TemplateVariables.TemplateVariable", b =>
                {
                    b.HasOne("SprintBusiness.Domain.Templates.TemplateComponents.TemplateComponent", "Component")
                        .WithMany("Variables")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Contacts.Contact", b =>
                {
                    b.Navigation("Conversation")
                        .IsRequired();
                });

            modelBuilder.Entity("SprintBusiness.Domain.Conversations.Conversation", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Messages");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Conversations.Notes.ConversationNote", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Flows.FlowMessages.FlowMessage", b =>
                {
                    b.Navigation("Buttons");

                    b.Navigation("ListItems");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Messages.Templates.TemplateMessage", b =>
                {
                    b.Navigation("Message")
                        .IsRequired();
                });

            modelBuilder.Entity("SprintBusiness.Domain.Templates.Template", b =>
                {
                    b.Navigation("Buttons");

                    b.Navigation("Components");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Templates.TemplateComponents.TemplateComponent", b =>
                {
                    b.Navigation("Variables");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Users.Employee", b =>
                {
                    b.Navigation("ConversationHistories");

                    b.Navigation("Conversations");
                });

            modelBuilder.Entity("SprintBusiness.Domain.Users.WorkGroups.WorkGroup", b =>
                {
                    b.Navigation("Conversations");
                });
#pragma warning restore 612, 618
        }
    }
}
